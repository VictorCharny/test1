
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt

import geopandas as gpd
import plotly.express as px
import numpy as np
import seaborn as sns

# Premier graphique : Occurrences des messages par jour
import plotly.graph_objects as go
import pandas as pd



import streamlit as st
import pandas as pd
import altair as alt
import streamlit as st
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from streamlit_extras.metric_cards import style_metric_cards




st.set_page_config(
    page_title="Ath√©na",
    page_icon="üí¨",
    layout="wide",
    initial_sidebar_state="expanded")


css='''
[data-testid="metric-container"] {
    width: fit-content;
    margin: auto;
}

[data-testid="metric-container"] > div {
    width: fit-content;
    margin: auto;
}

[data-testid="metric-container"] label {
    width: fit-content;
    margin: auto;
}
'''

st.markdown(f'<style>{css}</style>',unsafe_allow_html=True)

alt.themes.enable("dark")




data1=pd.read_csv('data1.csv')
data2=pd.read_csv('data2.csv')
data3=pd.read_csv("data3.csv")
data4=pd.read_csv("data4.csv")
data4=data4.rename(columns={'Message_ID': 'Message_id'})


#df=data2
df=pd.merge(data2,data3,on="Message_id")
dfchat=pd.merge(data2,data4,on=["User_id1","User_id2","Message_id"])



df['Jour'] = pd.to_datetime(df['timestamp'], errors='coerce', dayfirst=True).dt.day
df['Mois'] = pd.to_datetime(df['timestamp'], errors='coerce', dayfirst=True).dt.month
df['Ann√©e'] = pd.to_datetime(df['timestamp'], errors='coerce', dayfirst=True).dt.year
df['Heure'] = pd.to_datetime(df['timestamp'], errors='coerce', dayfirst=True).dt.strftime('%H')



dfchat['Jour'] = pd.to_datetime(dfchat['timestamp'], errors='coerce', dayfirst=True).dt.day
dfchat['Mois'] = pd.to_datetime(dfchat['timestamp'], errors='coerce', dayfirst=True).dt.month
dfchat['Ann√©e'] = pd.to_datetime(dfchat['timestamp'], errors='coerce', dayfirst=True).dt.year
dfchat["Heure"] = pd.to_datetime(dfchat['timestamp'], errors='coerce', dayfirst=True).dt.strftime('%H')




dfchat["zone"]=0
for i in range(len(dfchat)):
  if (dfchat.loc[i, 'User_id1'].endswith('I') or
      dfchat.loc[i, 'User_id2'].endswith('I')):
    dfchat.loc[i, "zone"]="italie"
  elif (dfchat.loc[i, 'User_id1'].endswith('G') or
        dfchat.loc[i, 'User_id2'].endswith('G')):
    dfchat.loc[i, "zone"]="allemagne"
  else:
    dfchat.loc[i, "zone"]="espagne"




df["zone"]=0
df["langue"]=0
for i in range(len(df)):
  if (df.loc[i, 'User_id1'].endswith('I') or
      df.loc[i, 'User_id2'].endswith('I')):
    df.loc[i, "zone"]="italie"
  elif (df.loc[i, 'User_id1'].endswith('G') or
        df.loc[i, 'User_id2'].endswith('G')):
    df.loc[i, "zone"]="allemagne"
  else:
    df.loc[i, "zone"]="espagne"


df["langue"]=0
for i in range(len(df)):
  if (df.loc[i, 'User_id1'].endswith('I')):
      
    df.loc[i, "langue"]="Italien"
  elif (df.loc[i, 'User_id1'].endswith('G')):
    df.loc[i, "langue"]="Allemand"
  
  elif (df.loc[i, 'User_id1'].endswith('E')):
    df.loc[i, "langue"]="Espagnol"
  else:
    df.loc[i, "langue"]="Fran√ßais"

dfchat=pd.merge(dfchat,data3,on="Message_id")


with st.sidebar:
    st.title('Dashboard Athena')
    
    
    months = ["janvier", "f√©vrier", "mars", "avril", "mai", "juin", "juillet", "ao√ªt", "septembre", "octobre", "novembre", "d√©cembre"]

# Cr√©er un dictionnaire pour associer les mois aux indices num√©riques (1-12)
    month_dict = {month: i+1 for i, month in enumerate(months)}

# Cr√©er une liste des mois pr√©sents dans les donn√©es, tri√©e
    month_list = list(df.Mois.unique())[::-1]
    month_list = sorted(month_list)
    month_list = [month for month in month_list if not np.isnan(month)]
    month_list = [int(x) for x in month_list]

# Cr√©ation de la liste des mois en fran√ßais √† partir des indices dans `month_list`
    month_names = [months[i-1] for i in month_list]

# S√©lection du mois avec Streamlit
    selected_month = st.selectbox('Choisissez un mois', month_names, index=len(month_list)-1)

# Convertir le mois s√©lectionn√© en num√©ro via le dictionnaire `month_dict`
    month_number = month_dict[selected_month]
    selected_month1=selected_month
    selected_month=month_number

# Filtrer les donn√©es pour le mois s√©lectionn√©
    df_selected_month = df[df.Mois == month_number]
    dfchat_selected_month=dfchat[dfchat.Mois==month_number]

    st.markdown("---")



    zone_list=list(df.zone.unique())[::-1]
    zone_list.append("All")
    selected_zone=st.selectbox('Choisissez une zone frontali√®re',zone_list,index=len(zone_list)-1)
    
    if selected_zone=="All":
        df_selected_zone=df
        dfchat_selected_zone=dfchat
    else:
        df_selected_zone=df[df.zone== selected_zone]
        dfchat_selected_zone=dfchat[dfchat.zone==selected_zone]
    st.markdown("---")
    st.sidebar.image("SNCF_R√©seau.png")


    









def map(data):
    # Calcul des occurrences pour chaque zone
    valeur1 = (data["zone"] == "italie").sum()
    valeur2 = (data["zone"] == "allemagne").sum()
    valeur3 = (data["zone"] == "espagne").sum()

    # Lecture du fichier GeoJSON des d√©partements
    departement = gpd.read_file("contour-des-departements.geojson", encoding='utf-8')

    # S√©lection des d√©partements pour chaque r√©gion frontali√®re
    dep1 = departement[departement["nom"] == "Pyr√©n√©es-Atlantiques"]
    dep2 = departement[departement["nom"] == "Pyr√©n√©es-Orientales"]
    dep3 = departement[departement["nom"] == "Ari√®ge"]
    dep4 = departement[departement["nom"] == "Hautes-Pyr√©n√©es"]
    dep5 = departement[departement["nom"] == "Haute-Garonne"]
    region_front1 = pd.concat([dep1, dep2, dep3, dep4, dep5])

    dep1 = departement[departement["nom"] == "Alpes-Maritimes"]
    dep2 = departement[departement["nom"] == "Alpes-de-Haute-Provence"]
    dep3 = departement[departement["nom"] == "Hautes-Alpes"]
    dep4 = departement[departement["nom"] == "Savoie"]
    dep5 = departement[departement["nom"] == "Haute-Savoie"]
    region_front2 = pd.concat([dep1, dep2, dep3, dep4, dep5])

    dep1 = departement[departement["nom"] == "Haut-Rhin"]
    dep2 = departement[departement["nom"] == "Bas-Rhin"]
    dep3 = departement[departement["nom"] == "Moselle"]
    region_front3 = pd.concat([dep1, dep2, dep3])

    # Pour les r√©gions frontali√®res, affecter des valeurs sp√©cifiques
    region_front1["valeur"] = valeur3
    region_front2["valeur"] = valeur1
    region_front3["valeur"] = valeur2

    # Cr√©er une copie de l'ensemble des d√©partements pour inclure toutes les r√©gions
    region_complete = departement.copy()

    # Initialiser toutes les valeurs √† 0 (ou toute autre valeur par d√©faut)
    region_complete["valeur"] = 0

    # Int√©grer les valeurs des r√©gions frontali√®res dans l'ensemble complet
    region_complete.loc[region_front1.index, "valeur"] = valeur3
    region_complete.loc[region_front2.index, "valeur"] = valeur1
    region_complete.loc[region_front3.index, "valeur"] = valeur2

    # Pr√©parer les donn√©es pour la carte Plotly
    geojson = region_complete.__geo_interface__  # Convertir GeoDataFrame en GeoJSON

    # Cr√©er la carte choropl√®the avec Plotly
    fig = px.choropleth(
        region_complete,
        geojson=geojson,
        locations=region_complete.index,  # Utilisation des indices des d√©partements comme identifiant
        color="valeur",
        hover_name="nom",
        hover_data=["valeur"],
        color_continuous_scale="blues",  # Choisir un sch√©ma de couleurs
        labels={"valeur": "Messages"},
        
    )

    # Mettre √† jour la projection pour la carte de la France
    fig.update_geos(fitbounds="locations", visible=False)

    fig.update_layout(
    template='plotly_dark',
    plot_bgcolor='rgba(0, 0, 0, 0)',
    paper_bgcolor='rgba(0, 0, 0, 0)',
    margin=dict(l=0, r=0, t=0, b=0),
    height=350
    )



    return fig
def calcul(df):  #nombre de messages par r√©gions
   zone_list=list(df.zone.unique())[::-1]

   values1=[]
   a=len(df)
   for i in(zone_list):
      b = len(df[df["zone"] == i])
      
      values1.append(b)
   return(values1)

def calculate(df,year): #diff√©rence avec vle mois pr√©c√©dent
   values=[]
   selected_year=df[df['Mois'] == year].reset_index()
   previous_year_data = df[df['Mois'] == year - 1].reset_index()
   selected_month = selected_year['zone'].unique()

   for i in (selected_month):
      a = previous_year_data[previous_year_data['zone'] == i]
      b = selected_year[selected_year['zone'] == i]
      c=len(b)-len(a)
      values.append(c)
   return(values)


def generate_metric_cards_graphically(df, year):
    # Appel de la fonction calculate pour obtenir les diff√©rences
    values = calculate(df, year)
    selected_year = df[df['Mois'] == year].reset_index()
    selected_months = selected_year['zone'].unique()
    
    # Cr√©er une figure pour afficher les cartes
    fig, axes = plt.subplots(len(selected_months), 1, figsize=(5, 3 * len(selected_months)))
    
    if len(selected_months) == 1:
        axes = [axes]  # Pour le cas o√π il n'y a qu'une seule zone
    
    # Pour chaque zone, afficher une "metric card"
    for ax, i, value in zip(axes, selected_months, values):
        # Couleur conditionnelle: vert pour positif, rouge pour n√©gatif
        color = 'lightgreen' if value > 0 else 'lightcoral'
        
        # Affichage du texte avec la couleur conditionnelle
        ax.text(0.5, 0.5, f"Zone: {i}\nDiff√©rence avec le mois pr√©c√©dent: {value}", fontsize=14, ha='center', va='center', color='black')
        
        # Appliquer la couleur de fond
        ax.set_facecolor(color)
        
        # Enlever les ticks x et y pour une carte propre
        ax.set_xticks([])  
        ax.set_yticks([])  
        
        # Titre de la carte
        ax.set_title(f'Carte m√©trique pour la zone {i}')
    
    # Ajuster l'espacement pour ne pas chevaucher les √©l√©ments
    plt.tight_layout()
    
    # Afficher le graphique dans Streamlit
    st.pyplot(fig)
def matrice(df):
   a=df[df["zone"]=="espagne"]
   b=df[df["zone"]=="italie"]
   c=df[df["zone"]=="allemagne"]
   return(a,b,c)

col1,col2,col3,col4,col5=st.columns([1,1,1,1,1],gap="small")
with col1:
    
    st.metric(label="Nombre total d'utilisateurs",value=len(data1),delta=len(data1))
    style_metric_cards(border_left_color="#003366", background_color="#222222")

with col2:
    
    st.metric(label="Nombre  d'utilisateurs italiens",value=len(data1[data1["Langue"]=="Italien"]),delta=len(data1[data1["Langue"]=="Italien"]))
with col3:
    
    st.metric(label="Nombre  d'utilisateurs allemand",value=len(data1[data1["Langue"]=="Allemand"]),delta=len(data1[data1["Langue"]=="Allemand"]))
with col4:
    
    st.metric(label="Nombre  d'utilisateurs Espagnol",value=len(data1[data1["Langue"]=="Espagnol"]),delta=len(data1[data1["Langue"]=="Espagnol"]))
with col5:
    st.metric(label="Nombre  d'utilisateurs Fran√ßais",value=len(data1[data1["Langue"]=="Fran√ßais"]),delta=len(data1[data1["Langue"]=="Fran√ßais"]))

    
st.markdown("---")

                





# Cr√©er trois colonnes avec Streamlit
col1,  col3 = st.columns([1, 1])  # La premi√®re et la troisi√®me colonne sont petites, la deuxi√®me est grande


# Code √† placer dans la colonne 1
with col1:
    st.markdown('#### Nombre de messages sur un an par zone ')

    # Cr√©er une liste vide pour stocker les r√©sultats
    result = []



    # It√©rer sur tous les mois uniques dans les donn√©es
    for i in month_list:
        # Filtrer les donn√©es pour chaque mois
        df_month = df[df["Mois"] == i]
        
        # D√©bogage pour v√©rifier si les donn√©es existent pour chaque mois
        
        #st.write(df_month.head())  # Afficher un aper√ßu des donn√©es pour chaque mois
        
        if not df_month.empty:
            # S√©parer les donn√©es par zone (Espagne, Italie, Allemagne)
            a, b, c = matrice(df_month)
            
            # Calculer la longueur des messages dans chaque zone
            a_length = len(a)  # Longueur des messages en Espagne
            b_length = len(b)  # Longueur des messages en Italie
            c_length = len(c)  # Longueur des messages en Allemagne
            total=a_length+b_length+c_length
            
            # Ajouter ces r√©sultats dans la liste sous forme de ligne [mois, espagne_length, italie_length, allemagne_length]
            result.append([i, a_length, b_length, c_length,total])
        else:
            st.write(f"Aucune donn√©e pour le mois {i}.")

    # Convertir la liste en DataFrame
    if result:
        df_result = pd.DataFrame(result, columns=["Mois", "Espagne", "Italie", "Allemagne","Total"])

        # Afficher le DataFrame dans Streamlit
        #st.write("DataFrame des r√©sultats:", df_result)  # Affichage du DataFrame
        #st.dataframe(df_result)  # Affichage interactif

        # Cr√©er les courbes pour chaque zone
        fig = go.Figure()
        months = ["janvier", "f√©vrier", "mars", "avril", "mai", "juin", "juillet", "ao√ªt", "septembre", "octobre", "novembre", "d√©cembre"]

        fig.add_trace(go.Scatter(x=months, y=df_result["Espagne"], mode='lines+markers', name="Espagne", line=dict(color='royalblue')))
        fig.add_trace(go.Scatter(x=months, y=df_result["Italie"], mode='lines+markers', name="Italie", line=dict(color='dodgerblue')))
        fig.add_trace(go.Scatter(x=months, y=df_result["Allemagne"], mode='lines+markers', name="Allemagne", line=dict(color='skyblue')))
        fig.add_trace(go.Scatter(x=months, y=df_result["Total"], mode='lines+markers', name="Total", line=dict(dash='dash', color='mediumblue')))

        # Personnalisation du graphique
        fig.update_layout(
            title="Nombre de messages par Zone et par Mois",
            xaxis_title="Mois",
            yaxis_title="Nombre de messages",
            showlegend=True
        )

        # Afficher le graphique avec Streamlit
        st.plotly_chart(fig, use_container_width=True)

    else:
        st.write("Aucun message n'a √©t√© trouv√© pour les zones et mois sp√©cifi√©s.")



with col3:
    

    # Cr√©er une liste vide pour stocker les r√©sultats
    result = []

    # V√©rification que month_list contient bien des mois
    #st.write("Month List:", month_list)

    # It√©rer sur tous les mois uniques dans les donn√©es
    for i in month_list:
        # Filtrer les donn√©es pour chaque mois
        df_month = df[df["Mois"] == i]
        
        # D√©bogage pour v√©rifier si les donn√©es existent pour chaque mois
        #st.write(f"Messages pour le mois {i}:")
        #st.write(df_month.head())  # Afficher un aper√ßu des donn√©es pour chaque mois
        
        if not df_month.empty:
            # S√©parer les donn√©es par zone (Espagne, Italie, Allemagne)
            a, b, c = matrice(df_month)
            
            # Compter le nombre de messages dans chaque zone
            a_count = len(a)
            b_count = len(b)
            c_count = len(c)
            
            # Ajouter ces r√©sultats dans la liste sous forme de ligne [zone, espagne, italie, allemagne]
            result.append([i, a_count, b_count, c_count])
        else:
            st.write(f"Aucune donn√©e pour le mois {i}.")

    # Convertir la liste en DataFrame
    if result:
        df_result = pd.DataFrame(result, columns=["Mois", "Espagne", "Italie", "Allemagne"])

       

        # Transformer en format long (melt)
        df_long = df_result.melt(id_vars=["Mois"], value_vars=["Espagne", "Italie", "Allemagne"], 
                                 var_name="Zone", value_name="Messages")
        


        mois_dict = {
    1: 'Janvier', 2: 'F√©vrier', 3: 'Mars', 4: 'Avril', 5: 'Mai', 6: 'Juin',
    7: 'Juillet', 8: 'Ao√ªt', 9: 'Septembre', 10: 'Octobre', 11: 'Novembre', 12: 'D√©cembre'
}

# Appliquer le remplacement des mois par les noms
        df_long["Mois"] = df_long["Mois"].replace(mois_dict)

# D√©finir l'ordre chronologique des mois
        mois_order = ['Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 
              'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre']

# Convertir la colonne "Mois" en cat√©gorie avec l'ordre sp√©cifi√©
        df_long["Mois"] = pd.Categorical(df_long["Mois"], categories=mois_order, ordered=True)


# Cr√©er la heatmap avec Altair
        heatmap = alt.Chart(df_long).mark_rect().encode(
            x=alt.X('Mois:N', title="Mois",sort=mois_order), 
            y=alt.Y('Zone:N', title="Zone"), 
            color=alt.Color('Messages:Q', scale=alt.Scale(scheme='blues'), title="Nombre de messages"),
            tooltip=['Mois', 'Zone', 'Messages']
            ).properties(
            width=600,
            height=400,
            title="Heatmap des messages pour Athena"
)


        st.altair_chart(heatmap, use_container_width=True)

    else:
        st.write("Aucun message n'a √©t√© trouv√© pour les zones et mois sp√©cifi√©s.")
   
st.markdown("---")
col2, col1, col3 = st.columns([0.3, 1, 0.5])  # La premi√®re et la troisi√®me colonne sont petites, la deuxi√®me est grande

with col1:
    st.markdown(f"### Carte interactive  ")


    choropleth = map(df_selected_month)
    from streamlit.components.v1 import html
    html(choropleth._repr_html_(), height=600)  # Affichage de la carte avec une hauteur de 600px

    
    
with col2:
    st.markdown('#### Augmentations/Pertes')

    values1=calcul(df_selected_month)
    values=calculate(df,selected_month)
    label1="Espagne"
    label2="Allemagne"
    label3="Italie"
    st.metric(label=label1,value=values1[0],delta=values[0])
    st.metric(label=label2,value=values1[1],delta=values[1])
    st.metric(label=label3,value=values1[2],delta=values[2])

    
with col3:
   st.markdown('#### R√©partition des messages ')
   result = calcul(df_selected_month)  # Calcul des r√©sultats
   zone_list = ['Espagne', 'Allemagne', 'Italie']  # Remplacez par votre liste de zones r√©elles

   # Cr√©er un graphique circulaire avec Plotly
   fig = px.pie(
       names=zone_list,  # Noms des zones
       values=result,  # Valeurs des zones
       title="Proportions des zones",  # Titre du graphique
       hole=0.5,  # Cr√©er un "donut chart" (si vous pr√©f√©rez un cercle plein, d√©finissez hole=0)
       color=zone_list,  # Ajouter des couleurs distinctes pour chaque zone
       color_discrete_sequence=px.colors.sequential.Cividis
  # Palette de couleurs
   )

   # Afficher le graphique avec Streamlit
   st.plotly_chart(fig)

st.markdown("---")




col1, col3 = st.columns([1, 1])  


with col1:

    
    
        #time_list =[#"Semaine","Jour","Heure"]
    time_list=["Jour","Heure"]



    selected_time = st.selectbox('Vision sp√©cifique intervalle temporel', time_list, index=len(time_list)-1)


    if selected_time=="Jour":
        if selected_zone=="All":
            df4=df[df["Mois"]==selected_month]
            day_counts = df4['Jour'].value_counts().sort_index()
            fig = px.bar(
            x=day_counts.index,  # Jour
            y=day_counts.values,  # Occurrences
            labels={'x': 'Jour', 'y': 'Occurrences'},  # Labels pour les axes
            title="Messages/jour",  # Titre du graphique
            color=day_counts.values,  # Couleur bas√©e sur la valeur
            color_continuous_scale='Blues',  # Palette de couleurs
   )     
            fig.update_layout(
            xaxis=dict(
                tickmode='linear',  # Afficher tous les ticks
                tickvals=day_counts.index,  # Les ticks correspondent aux valeurs d'heure
                tickangle=45,  # Incliner les labels pour une meilleure lisibilit√©
                title="Heure"
            ),
            yaxis=dict(
                title="Occurrences"
            )
        )
            st.plotly_chart(fig)


        else:

        
                df3 = df_selected_month[df_selected_month["zone"] == selected_zone]
                day_counts = df3['Jour'].value_counts().sort_index()
                fig = px.bar(
                x=day_counts.index,  # Jour
                y=day_counts.values,  # Occurrences
                labels={'x': 'Jour', 'y': 'Occurrences'},  # Labels pour les axes
                title="Messages/jour",  # Titre du graphique
                color=day_counts.values,  # Couleur bas√©e sur la valeur
                color_continuous_scale='Blues',  # Palette de couleurs
   )        
                fig.update_layout(
                xaxis=dict(
                tickmode='linear',  # Afficher tous les ticks
                tickvals=day_counts.index,  # Les ticks correspondent aux valeurs d'heure
                tickangle=45,  # Incliner les labels pour une meilleure lisibilit√©
                title="Heure"
                ),
                yaxis=dict(
                title="Occurrences"
            )
        )   
                st.plotly_chart(fig)
                
             
            

   
   # Afficher le graphique avec Streamlit
        
    
    if selected_time=="Heure":
        if selected_zone=="All":
            df4=df[df["Mois"]==selected_month]
            day_counts = df4['Heure'].value_counts().sort_index()
            fig = px.bar(
            x=day_counts.index,  # Jour
            y=day_counts.values,  # Occurrences
            labels={'x': 'Heure', 'y': 'Occurrences'},  # Labels pour les axes
            title="Messages/heure",  # Titre du graphique
            color=day_counts.values,  # Couleur bas√©e sur la valeur
            color_continuous_scale='Blues',  # Palette de couleurs
            )
            fig.update_layout(
            xaxis=dict(
                tickmode='linear',  # Afficher tous les ticks
                tickvals=day_counts.index,  # Les ticks correspondent aux valeurs d'heure
                tickangle=45,  # Incliner les labels pour une meilleure lisibilit√©
                title="Heure"
            ),
            yaxis=dict(
                title="Occurrences"
            )
        )
   
            st.plotly_chart(fig)
        else:
            df3 = df_selected_month[df_selected_month["zone"] == selected_zone]
            day_counts = df3['Heure'].value_counts().sort_index()
            fig = px.bar(
            x=day_counts.index,  # Jour
            y=day_counts.values,  # Occurrences
            labels={'x': 'Heure', 'y': 'Occurrences'},  # Labels pour les axes
            title="Messages/heure",  # Titre du graphique
            color=day_counts.values,  # Couleur bas√©e sur la valeur
            color_continuous_scale='Blues',  # Palette de couleurs
   )    
            
            fig.update_layout(
            xaxis=dict(
                tickmode='linear',  # Afficher tous les ticks
                tickvals=day_counts.index,  # Les ticks correspondent aux valeurs d'heure
                tickangle=45,  # Incliner les labels pour une meilleure lisibilit√©
                title="Heure"
            ),
            yaxis=dict(
                title="Occurrences"
            )
        )
   
   # Afficher le graphique avec Streamlit
            st.plotly_chart(fig)


with col3:
    if selected_time=="Heure" or selected_time=="Jour" or selected_time=="Jour":
        st.markdown(f"### DataFrame pour le mois {selected_month1} et la zone {selected_zone} tri√© par {selected_time}")




    if selected_zone=="All":
        filtered_df = df[df["Mois"]==selected_month]
        filtered_df=filtered_df.sort_values(by=selected_time)
        if not filtered_df.empty:
            st.dataframe(filtered_df)
        else:
            st.write("Aucune donn√©e disponible pour cette s√©lection.")


    else:

        filtered_df = df[(df["Mois"] == selected_month) & (df["zone"] == selected_zone)]
        filtered_df=filtered_df.sort_values(by=selected_time)


        if not filtered_df.empty:
            st.dataframe(filtered_df)
        else:
            st.write("Aucune donn√©e disponible pour cette s√©lection.")   




st.markdown("---")
if selected_zone == "All":
    # Traitement des donn√©es pour toutes les zones
    depeche_counts = df_selected_month["depeche"].value_counts().reset_index()
    depeche_counts.columns = ['depeche', 'Occurrences']
    depeche_counts_sorted = depeche_counts.sort_values(by="Occurrences", ascending=False)

    depeche_counts_chat = dfchat_selected_month["depeche"].value_counts().reset_index()
    depeche_counts_chat.columns = ['depeche', 'Occurrences']

    depeche_counts_chat['Ratio'] = (depeche_counts_chat['Occurrences'] / len(dfchat_selected_month)) * 100
    depeche_counts['Ratio'] = (depeche_counts['Occurrences'] / len(df_selected_month)) * 100

    depeche_counts_sorted = depeche_counts.sort_values(by="Occurrences", ascending=False)
    depeche_counts_chat_sorted = depeche_counts_chat.sort_values(by="Occurrences", ascending=False)
else:
    # Filtrage des donn√©es en fonction de la zone s√©lectionn√©e
    df_selected_month = df_selected_month[df_selected_month["zone"] == selected_zone]
    depeche_counts = df_selected_month["depeche"].value_counts().reset_index()
    depeche_counts.columns = ['depeche', 'Occurrences']

    dfchat_selected_month = dfchat_selected_month[dfchat_selected_month["zone"] == selected_zone]
    depeche_counts_chat = dfchat_selected_month["depeche"].value_counts().reset_index()
    depeche_counts_chat.columns = ['depeche', 'Occurrences']

    # Calcul du ratio en pourcentage
    depeche_counts_chat['Ratio'] = (depeche_counts_chat['Occurrences'] / len(dfchat_selected_month)) * 100
    depeche_counts['Ratio'] = (depeche_counts['Occurrences'] / len(df_selected_month)) * 100

    # Tri des r√©sultats
    depeche_counts_sorted = depeche_counts.sort_values(by="Occurrences", ascending=False)
    depeche_counts_chat_sorted = depeche_counts_chat.sort_values(by="Occurrences", ascending=False)

# Cr√©ation de 3 colonnes avec Streamlit
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown('#### Depeches les plus recommand√©es')
    st.dataframe(
        depeche_counts_sorted,
        column_order=("depeche", "Occurrences"),
        hide_index=True,
        width=None,
        column_config={
            "depeche": st.column_config.TextColumn("depeche"),
            "Occurrences": st.column_config.ProgressColumn(
                "Occurrences", format="%f", min_value=0, max_value=max(depeche_counts_sorted["Occurrences"])
            ),
        }
    )

st.markdown("----")
with col2:
    st.markdown('#### Ratio d√©p√™ches/chats')

    # Utilisation de Plotly pour g√©n√©rer le barplot avec le ratio en pourcentage
    fig = px.bar(
        depeche_counts_chat_sorted,
        x="depeche",
        y="Ratio",  # Utilisez 'Ratio' pour afficher les pourcentages
        labels={'depeche': 'Depeche', 'Ratio': 'Ratio (%)'},
        #title="Ratio des depeches par rapport au nombre total de chats"
    )

    # Affichage du graphique dans Streamlit
    st.plotly_chart(fig, use_container_width=True)

with col3:
    st.markdown('#### Ratio d√©p√™che/messages')

    # Utilisation de Plotly pour g√©n√©rer le barplot avec le ratio en pourcentage
    fig = px.bar(
        depeche_counts_sorted,
        x="depeche",
        y="Ratio",  # Utilisez 'Ratio' pour afficher les pourcentages
        labels={'depeche': 'Depeche', 'Ratio': 'Ratio (%)'},
        #title="Ratio des depeches par rapport au nombre total de messages"
    )

    # Affichage du graphique dans Streamlit
    st.plotly_chart(fig, use_container_width=True)
col1, col2, col3 = st.columns(3)

with col1:
    if selected_zone=="All":
        #
        langues=["Fran√ßais","Italien","Allemand","Espagnol","All"]
    elif selected_zone=="italie":
        langues=["Fran√ßais","Italien","All"]
        #
    elif selected_zone=="allemagne":
        langues=["Fran√ßais","Allemand","All"]
    else:
        #
        langues=["Fran√ßais","Espagnol","All"]

    





    selected_langue=st.selectbox('Langue du message', langues, index=len(langues)-1)
    if selected_zone=="All":
        dfa=df_selected_month
        for i in (langues):
            a=0
            if i!="All":
                dfa2=df_selected_month[df_selected_month["langue"]==i]
                a=len(dfa2)
                st.metric(label=f" messages en {i}  zone frontali√®re {selected_zone} en {selected_month1}",value=a)
            else:
                dfa=df_selected_month
                st.metric(label=f" messages en {i}   zone frontali√®re {selected_zone} en {selected_month1}",value=len(dfa))
    else:
        dfa=df_selected_month[df_selected_month["zone"]==selected_zone]
        for i in (langues):
            a=0
            if i!="All":
                dfa1=dfa[dfa["langue"]==i]
                a=len(dfa1)
                st.metric(label=f" messages en {i}  zone frontali√®re {selected_zone} en {selected_month1}",value=a)
            else:
                dfa=dfa
                a=len(dfa)
                st.metric(label=f" messages en {i}  zone frontali√®re {selected_zone} en {selected_month1}",value=a)

with col2:
    st.markdown('#### R√©partition des reccomandations')
    if selected_langue != "All":

        df=df_selected_month[df_selected_month["langue"]==selected_langue]
        a=df[df["Recom_num"]==1]
        b=df[df["Recom_num"]==2]
        c=df[df["Recom_num"]==3]
        a=len(a)
        b=len(b)
        c=len(c)
    # Cr√©er un graphique circulaire avec Plotly
        fig = px.pie(
        names=[1,2,3],  # Noms des zones
        values=[a,b,c],  # Valeurs des zones
        #title="R√©partition des reccomandations",  # Titre du graphique
        hole=0.5,  # Cr√©er un "donut chart" (si vous pr√©f√©rez un cercle plein, d√©finissez hole=0)
        color=[1,2,3],  # Ajouter des couleurs distinctes pour chaque zone
        color_discrete_sequence=px.colors.sequential.Cividis
  # Palette de couleurs
        )

   # Afficher le graphique avec Streamlit
        st.plotly_chart(fig)
    else:
        df=df_selected_month
        a=df[df["Recom_num"]==1]
        b=df[df["Recom_num"]==2]
        c=df[df["Recom_num"]==3]
        a=len(a)
        b=len(b)
        c=len(c)
    # Cr√©er un graphique circulaire avec Plotly
        fig = px.pie(
        names=[1,2,3],  # Noms des zones
        values=[a,b,c],  # Valeurs des zones
        #title="R√©partition des reccomandations",  # Titre du graphique
        hole=0.5,  # Cr√©er un "donut chart" (si vous pr√©f√©rez un cercle plein, d√©finissez hole=0)
        color=[1,2,3],  # Ajouter des couleurs distinctes pour chaque zone
        color_discrete_sequence=px.colors.sequential.Cividis
  # Palette de couleurs
        )

   # Afficher le graphique avec Streamlit
        st.plotly_chart(fig)
with col3:
    st.markdown("#### Proba associ√© par intervalle")


    bins = [0.3,0.4,0.5, 0.6,0.7, 0.8, 0.9,1]  
    labels = [ '0.3-0.4','0.4,0.5','0.5,0.6','0.6-0.7', '0.7-0.8', '0.8-0.9','0.9-1']  # √âtiquettes correspondantes

# Ajouter une nouvelle colonne 'intervalle' pour associer chaque probabilit√© √† un intervalle
    df['intervalle'] = pd.cut(df['proba_associ√©e'], bins=bins, labels=labels, right=False)

# Compter le nombre d'occurrences dans chaque intervalle
    counts = df['intervalle'].value_counts().sort_index()
    

# Cr√©er un graphique avec Plotly
    fig = px.bar(
        x=counts.index,
        y=counts.values,
        labels={'x': 'Intervalle de probabilit√©', 'y': 'Nombre d\'occurrences'},
        #title="R√©partition des probabilit√© par intervalle"
)

# Afficher le graphique
    st.plotly_chart(fig)





